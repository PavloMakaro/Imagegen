import telebot
import requests
from io import BytesIO
import time
import random
import json

TOKEN = '8479387303:AAFs2042KePw6Zw_Mvzsko5jMDQ9f3TiL_k'
bot = telebot.TeleBot(TOKEN)

MODELS_CACHE = {}
CACHE_TTL = 3600  # 1 —á–∞—Å

def get_available_models():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ API"""
    current_time = time.time()
    if MODELS_CACHE and (current_time - MODELS_CACHE.get('updated', 0)) < CACHE_TTL:
        return MODELS_CACHE['list']
    
    try:
        resp = requests.get("https://image.pollinations.ai/models", timeout=10)
        resp.raise_for_status()
        models = json.loads(resp.text)  # JSON-–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
        models = [m.lower().strip() for m in models if m and len(m) < 50]  # –û—á–∏—Å—Ç–∫–∞
        models = sorted(list(set(models)))  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ
        
        # Fallback, –µ—Å–ª–∏ –ø—É—Å—Ç–æ
        if not models:
            models = ['flux', 'turbo', 'flux-realism', 'flux-anime', 'kontext', 'nanobanana', 'seedream', 'boltning']
        
        MODELS_CACHE['list'] = models
        MODELS_CACHE['updated'] = current_time
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)} ‚Äî {models}")
        return models
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        return ['flux', 'turbo', 'kontext', 'boltning']  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = telebot.types.KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª–∏")
    markup.add(btn)
    bot.reply_to(message, 
                 "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º–ø—Ç ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ **–≤—Å–µ—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö** –∏–∑ API.\n"
                 "–ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–∏—Ç —Å–ø–∏—Å–æ–∫. –ü–æ–¥–æ–∂–¥–∏: API –¥–∞—ë—Ç 8‚Äì12 –º–æ–¥–µ–ª–µ–π, –∫–∞–∂–¥–∞—è —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º seed –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è.",
                 reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª–∏")
def refresh_models(message):
    bot.reply_to(message, "–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∏–∑ API...")
    models = get_available_models()
    short_list = ', '.join(models[:10]) + ('...' if len(models)>10 else '')
    bot.reply_to(message, f"–ê–∫—Ç—É–∞–ª—å–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π: {short_list}\n(flux, turbo, kontext, gptimage –∏ –¥—Ä.)")

@bot.message_handler(func=lambda message: True)
def generate_images(message):
    prompt = message.text.strip()
    if not prompt or prompt == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª–∏":
        return
    
    bot.reply_to(message, f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è: _{prompt}_\n\n–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª–∏ –∏–∑ API...")
    
    models = get_available_models()
    bot.reply_to(message, f"–ù–∞–π–¥–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π. –°—Ç–∞—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∫–∞–∂–¥–∞—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º seed)...")
    
    sent = 0
    for model in models:
        try:
            encoded = requests.utils.quote(prompt)
            seed = random.randint(0, 9999)  # –†–∞–Ω–¥–æ–º –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            url = f"https://image.pollinations.ai/prompt/{encoded}?model={model}&width=512&height=512&nologo=true&seed={seed}&enhance=true&private=true&safe=false"
            
            resp = requests.get(url, timeout=30)
            resp.raise_for_status()
            
            if 'error' in resp.text.lower() or len(resp.content) < 1000:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É (–º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ç–≤–µ—Ç)
                print(f"–ú–æ–¥–µ–ª—å {model} –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue
            
            img = BytesIO(resp.content)
            img.name = f"{model}.jpg"
            caption = f"–ú–æ–¥–µ–ª—å: *{model}*\n–ü—Ä–æ–º–ø—Ç: _{prompt}_\n(Seed: {seed})"
            bot.send_photo(message.chat.id, img, caption=caption, parse_mode='Markdown')
            sent += 1
            time.sleep(1.5)  # –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ {model}: {e}")
            continue
    
    bot.reply_to(message, f"–ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ: {sent}/{len(models)}. –ï—Å–ª–∏ –º–∞–ª–æ ‚Äî –æ–±–Ω–æ–≤–∏ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–æ–º–ø—Ç (API –∏–Ω–æ–≥–¥–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç). –ï—â—ë?")

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª–∏...")
    print("–î–æ—Å—Ç—É–ø–Ω–æ:", get_available_models())
    bot.polling(none_stop=True)
