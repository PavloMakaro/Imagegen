import telebot
import requests
from io import BytesIO
import re
import time

TOKEN = '8479387303:AAFs2042KePw6Zw_Mvzsko5jMDQ9f3TiL_k'
bot = telebot.TeleBot(TOKEN)

# –ö—ç—à –º–æ–¥–µ–ª–µ–π: {model_name: last_updated}
MODELS_CACHE = {}
CACHE_TTL = 3600  # 1 —á–∞—Å

def get_available_models():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏ –∏–∑ API (–ø–∞—Ä—Å–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏–ª–∏ fallback)"""
    current_time = time.time()
    
    # –ï—Å–ª–∏ –∫—ç—à —Å–≤–µ–∂–∏–π ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    if MODELS_CACHE and (current_time - MODELS_CACHE.get('updated', 0)) < CACHE_TTL:
        return MODELS_CACHE['list']
    
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–∞–º –µ—Å—Ç—å JS —Å –º–æ–¥–µ–ª—è–º–∏)
        resp = requests.get("https://pollinations.ai/", timeout=10)
        resp.raise_for_status()
        
        # –ò—â–µ–º –º–æ–¥–µ–ª–∏ –≤ JS –∏–ª–∏ HTML (—Ä–µ–≥—É–ª—è—Ä–∫–∞ –Ω–∞ model=...)
        models = set()
        patterns = [
            r'model["\']?:\s*["\']([^"\']+)["\']',
            r'data-model=["\']([^"\']+)["\']',
            r'/p/[^?]+\?model=([^&"\']+)'
        ]
        for pattern in patterns:
            found = re.findall(pattern, resp.text, re.I)
            models.update(found)
        
        # Fallback: –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
        fallback = ['flux', 'turbo', 'kontext', 'boltning', 'flux-dev', 'flux-schnell']
        models = models or fallback
        
        models = [m.lower() for m in models if m and len(m) < 30]
        models = sorted(list(set(models)))  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        
        # –ö—ç—à–∏—Ä—É–µ–º
        MODELS_CACHE['list'] = models
        MODELS_CACHE['updated'] = current_time
        return models
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return ['flux', 'turbo', 'kontext', 'boltning']  # –ù–∞–¥—ë–∂–Ω—ã–π fallback

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = telebot.types.KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª–∏")
    markup.add(btn)
    bot.reply_to(message, 
                 "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º–ø—Ç ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ **–≤—Å–µ—Ö –º–æ–¥–µ–ª—è—Ö**.\n"
                 "–ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.",
                 reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª–∏")
def refresh_models(message):
    bot.reply_to(message, "–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π...")
    models = get_available_models()
    bot.reply_to(message, f"–ù–∞–π–¥–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π: {', '.join(models[:10])}{'...' if len(models)>10 else ''}")

@bot.message_handler(func=lambda message: True)
def generate_images(message):
    prompt = message.text.strip()
    if not prompt or prompt == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª–∏":
        return
    
    bot.reply_to(message, f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è:\n_{prompt}_\n\n–ú–æ–¥–µ–ª–µ–π: –ø–æ–¥–æ–∂–¥–∏, –æ–ø—Ä–µ–¥–µ–ª—è—é...")
    
    models = get_available_models()
    bot.reply_to(message, f"–ù–∞–π–¥–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å...")
    
    sent = 0
    for i, model in enumerate(models):
        try:
            encoded = requests.utils.quote(prompt)
            url = f"https://pollinations.ai/p/{encoded}?model={model}&width=512&height=512&nologo=true&seed=-1&safe=true"
            
            resp = requests.get(url, timeout=30)
            resp.raise_for_status()
            
            img = BytesIO(resp.content)
            img.name = f"{model}.jpg"
            
            caption = f"–ú–æ–¥–µ–ª—å: *{model}*\n–ü—Ä–æ–º–ø—Ç: _{prompt}_"
            bot.send_photo(message.chat.id, img, caption=caption, parse_mode='Markdown')
            sent += 1
            
            time.sleep(1)  # –ß—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∏ –Ω–µ —Å–ª–æ–≤–∏—Ç—å –±–∞–Ω
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ {model}: {e}")
            continue
    
    summary = f"–ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}/{len(models)}"
    bot.reply_to(message, summary)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò–∑–≤–ª–µ–∫–∞—é –º–æ–¥–µ–ª–∏...")
    print("–î–æ—Å—Ç—É–ø–Ω–æ:", get_available_models())
    bot.polling(none_stop=True)
